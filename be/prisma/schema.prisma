generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  sharedWorkspaces Workspace[]  @relation("WorkspaceMembers")
  ownedWorkspaces  Workspace[]  @relation("OwnedWorkspaces")
  invitation       Invitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id         String       @id @default(cuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tables     Table[]
  owner      User         @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  ownerId    String
  members    User[]       @relation("WorkspaceMembers")
  invitation Invitation[]
}

model Table {
  id          String    @id @default(cuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  columns     Column[]
  rows        Row[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Column {
  id        String   @id @default(cuid())
  name      String
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  dataType  String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cells     Cell[]
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  cells     Cell[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id        String   @id @default(cuid())
  rowId     String
  row       Row      @relation(fields: [rowId], references: [id])
  columnId  String
  column    Column   @relation(fields: [columnId], references: [id])
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id          String           @id @default(cuid())
  // email       String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId String
  invitedBy   User             @relation(fields: [invitedById], references: [id])
  invitedById String
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  expiresAt   DateTime
  token       String
}

enum InvitationStatus {
  PENDING
  EXPIRED
  ACCEPTED
}
